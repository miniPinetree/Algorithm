# 시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
# 1 초	256 MB	70446	35437	28467	50.383%
# 문제
# 셀프 넘버는 1949년 인도 수학자 D.R. Kaprekar가 이름 붙였다. 양의 정수 n에 대해서 d(n)을 n과 n의 각 자리수를 더하는 함수라고 정의하자. 예를 들어, d(75) = 75+7+5 = 87이다.

# 양의 정수 n이 주어졌을 때, 이 수를 시작해서 n, d(n), d(d(n)), d(d(d(n))), ...과 같은 무한 수열을 만들 수 있다. 

# 예를 들어, 33으로 시작한다면 다음 수는 33 + 3 + 3 = 39이고, 그 다음 수는 39 + 3 + 9 = 51, 다음 수는 51 + 5 + 1 = 57이다. 이런식으로 다음과 같은 수열을 만들 수 있다.

# 33, 39, 51, 57, 69, 84, 96, 111, 114, 120, 123, 129, 141, ...

# n을 d(n)의 생성자라고 한다. 위의 수열에서 33은 39의 생성자이고, 39는 51의 생성자, 51은 57의 생성자이다. 생성자가 한 개보다 많은 경우도 있다. 예를 들어, 101은 생성자가 2개(91과 100) 있다. 

# 생성자가 없는 숫자를 셀프 넘버라고 한다. 100보다 작은 셀프 넘버는 총 13개가 있다. 1, 3, 5, 7, 9, 20, 31, 42, 53, 64, 75, 86, 97

# 10000보다 작거나 같은 셀프 넘버를 한 줄에 하나씩 출력하는 프로그램을 작성하시오.

# 입력
# 입력은 없다.

# 출력
# 10,000보다 작거나 같은 셀프 넘버를 한 줄에 하나씩 증가하는 순서로 출력한다.

#문제풀이

def find_self_num():
    self_num = set(range(1,10001))
    generated_num = set()

    for n in self_num: #1~1만 숫자 범위 내의 숫자들을 반복한다.
        for i in str(n): # 숫자를 자릿수별로 분리해서 합산해본다
            n += int(i)
        generated_num.add(n)
    self_num = self_num - generated_num
    for n in sorted(self_num):
        print(n)

find_self_num()

# 접근 방식
# d(n) 공식에 숫자를 대입했을 때 결과가 있다면 그 수는 셀프넘버가 아니다.
# 1부터 1만까지의 수를 대입하여 셀프넘버가 아닌 수를 구한다.
# 1부터 1만까지의 수 중 셀프넘버가 아닌 수를 제외시킨다.
# 남는 값은 셀프넘버가 된다.

