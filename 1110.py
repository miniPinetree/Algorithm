<<<<<<< HEAD
# 더하기 사이클 성공분류
# 시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
# 2 초	128 MB	108082	51270	43262	48.104%
# 문제
# 0보다 크거나 같고, 99보다 작거나 같은 정수가 주어질 때 다음과 같은 연산을 할 수 있다. 먼저 주어진 수가 10보다 작다면 앞에 0을 붙여 두 자리 수로 만들고, 각 자리의 숫자를 더한다. 그 다음, 주어진 수의 가장 오른쪽 자리 수와 앞에서 구한 합의 가장 오른쪽 자리 수를 이어 붙이면 새로운 수를 만들 수 있다. 다음 예를 보자.

# 26부터 시작한다. 2+6 = 8이다. 새로운 수는 68이다. 6+8 = 14이다. 새로운 수는 84이다. 8+4 = 12이다. 새로운 수는 42이다. 4+2 = 6이다. 새로운 수는 26이다.

# 위의 예는 4번만에 원래 수로 돌아올 수 있다. 따라서 26의 사이클의 길이는 4이다.

# N이 주어졌을 때, N의 사이클의 길이를 구하는 프로그램을 작성하시오.

# 입력
# 첫째 줄에 N이 주어진다. N은 0보다 크거나 같고, 99보다 작거나 같은 정수이다.

# 출력
# 첫째 줄에 N의 사이클 길이를 출력한다.

# 자료 입력
N = int(input())

# 문제 풀이
check = N
temp = 0
new_N = 0
cycle_count = 0

while True:
    temp = (N//10) + (N%10)
    new_N = (N % 10)*10 + (temp % 10)
    cycle_count += 1
    N = new_N
    if new_N == check:
        break

print(cycle_count)

## 다른 접근 방식 (시간초과)
# import sys

# n= str(input())
# check = n
# cnt = 0

# while True:
#     sum = 0
#     for char in n:
#         sum += int(char)
#     new_num = n[-1]+str(sum)[-1]
#     cnt +=1
#     if new_num == check:
#         print(cnt)
#         break
#     else:
#         n = new_num


=======
# 더하기 사이클 성공분류
# 시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
# 2 초	128 MB	108082	51270	43262	48.104%
# 문제
# 0보다 크거나 같고, 99보다 작거나 같은 정수가 주어질 때 다음과 같은 연산을 할 수 있다. 먼저 주어진 수가 10보다 작다면 앞에 0을 붙여 두 자리 수로 만들고, 각 자리의 숫자를 더한다. 그 다음, 주어진 수의 가장 오른쪽 자리 수와 앞에서 구한 합의 가장 오른쪽 자리 수를 이어 붙이면 새로운 수를 만들 수 있다. 다음 예를 보자.

# 26부터 시작한다. 2+6 = 8이다. 새로운 수는 68이다. 6+8 = 14이다. 새로운 수는 84이다. 8+4 = 12이다. 새로운 수는 42이다. 4+2 = 6이다. 새로운 수는 26이다.

# 위의 예는 4번만에 원래 수로 돌아올 수 있다. 따라서 26의 사이클의 길이는 4이다.

# N이 주어졌을 때, N의 사이클의 길이를 구하는 프로그램을 작성하시오.

# 입력
# 첫째 줄에 N이 주어진다. N은 0보다 크거나 같고, 99보다 작거나 같은 정수이다.

# 출력
# 첫째 줄에 N의 사이클 길이를 출력한다.

# 자료 입력
N = int(input())

# 문제 풀이
check = N
temp = 0
new_N = 0
cycle_count = 0

while True:
    temp = (N//10) + (N%10)
    new_N = (N % 10)*10 + (temp % 10)
    cycle_count += 1
    N = new_N
    if new_N == check:
        break

print(cycle_count)

## 다른 접근 방식 (시간초과)
# import sys

# n= str(input())
# check = n
# cnt = 0

# while True:
#     sum = 0
#     for char in n:
#         sum += int(char)
#     new_num = n[-1]+str(sum)[-1]
#     cnt +=1
#     if new_num == check:
#         print(cnt)
#         break
#     else:
#         n = new_num


>>>>>>> 88d5abf5fdf1224584809c4f7ffbcfc6b01b5095
